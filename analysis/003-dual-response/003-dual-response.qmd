---
title: "003-dual-response"
author: "Andriy Koval"
date: "Last Updated: `r Sys.Date()`"
format:
  html:
    theme: sandstone
    highlight: tango
    toc: true
    number-sections: true
    self-contained: true
    code-fold: show 
editor_options: 
  chunk_output_type: console
---

```{r set_options, echo=F}
# cat("Working directory: ", getwd()) # turn on to test the location
report_render_start_time <- Sys.time()
# set options shared by all chunks
knitr::opts_chunk$set(
  results      = 'show',
  message      = FALSE,
  warning      = FALSE,
  comment      = NA,
  tidy         = FALSE,
  # dpi        = 400, # dots per inch,
  # out.width  = "650px", # pixels, this affects only the markdown, not the underlying png file.  The height will be scaled appropriately.
  fig.width    = 6, # inches
  fig.height   = 4, # inches
  fig.path     = 'figure-png-com/' # where figures are stored
)
echo_chunks    <- FALSE #Toggle for debugging.
message_chunks <- FALSE #Toggle for debugging.
options(width=100) # number of characters to display in the output (dflt = 80)
ggplot2::theme_set(ggplot2::theme_bw()) # common theme for all graphs
```

```{r load-sources, echo=FALSE}
source("../../scripts/common-functions.R")
```

```{r load-packages}
library(tidyverse)
```

```{r declare-globals, echo=FALSE}
augment_with_indicators <- function(
  d
  ,item_names
  ,valid_responses
  ,id_name
  ,item_stem
  ,separator = "_"
){
  # d <- ds0
  # item_names = c("b4_response1", "b4_response2")
  # valid_responses = c(1,2,3,97)
  # id_name = "id"
  # item_stem = "b4"
  # separator = "_"
  
  (d1 <- d %>% select( c(id_name, item_names) ) )
  # define the pool of valid values (the rest  will be converted to NA)
  # valids <- c(1,2,3,97)
  # item_names <- c("b4_response1","b4_response2")
  d2 <-
    d1 %>%
    tidyr::pivot_longer(cols = item_names) %>%
    mutate(
      value_valid = value %in% valid_responses # TRUE if target, FALSE if valid, but not target
      ,item_response = paste0(item_stem,separator,value)
    ) 
  d2
 
  # make wide ds with indicators
  d3 <-
    d2 %>%
    mutate(
      value = ifelse(value %in% valid_responses, value, NA)
    ) %>% 
    filter(!is.na(value)) %>%
    select(!!!rlang::syms(c(id_name, "item_response", "value_valid"))) %>% 
    pivot_wider(
      names_from   = item_response
      ,values_from = value_valid
      ,values_fn   = max
      ,values_fill = FALSE
    ) %>%
    mutate_at(
      .vars = setdiff(names(.),id_name)
      ,.funs = as.logical
    )
  d3

  # # join to the ds with raw responses

  d4 <-
    dplyr::left_join(
      d
      ,d3
      ,by = id_name
    ) 
  d4
  
  return(d4)
  
}
```

# Scenario

Consider a survey in which a group of respondents are asked the following question (1)

> Did you have lunch today? (Yes, No)

After an affirmative response, we follow up with the question (2)

> What fruit did you eat with your lunch? (please provide up to 2 answers)

The data from this survey could be organized in the following tibble

```{r results='show', message=FALSE, echo=echo_chunks}
ds0 <-
  tibble::tribble(
    ~id, ~b4, ~b4_response1, ~b4_response2,
    1,  1 ,  1   ,2  ,
    2,  2 ,  NA  ,NA ,
    3,  1 ,  2   ,3  ,
    4,  1 ,  97  ,-7 ,
    5,  1 ,  3   ,97 ,
    6,  1 ,  NA  ,2  ,
    7, -7 ,  -7  ,-7 ,
    8,  1 ,  97  ,97 ,
    9,  1 ,  NA  ,NA ,
  ) %>%
  mutate_all(as.integer)
ds0 
```

Where item `b4` stores response values for Question 1 and items `b4_response1` and `b4_response2` store response values for Question 2. The names of items and response coding were designed to simulate a realistic scenario. Numerical codes could be assigned descriptive labels to aid interpretation, as shown in the example below

```{r}
b4_responses <- c(
    "1" = "yes"
  , "2" = "no"
  ,"-7" = "Q not asked"
  )
fruit <- c(
    "1" = "apple"
  , "2" = "banana"
  , "3" = "kiwi"
  ,"97" = "other"
  )
```

```{r tweak-data,echo = echo_chunks, results='show', message=message_chunks}
ds1 <- 
  ds0 %>% 
  mutate(
    b4 = factor(b4,levels=names(b4_responses),labels=b4_responses)
    ,b4_response1 = factor(b4_response1,levels=names(fruit),labels=fruit)
    ,b4_response2 = factor(b4_response2,levels=names(fruit),labels=fruit)
  )

labelled::var_label(ds1) <- list(
    id           = "Survey ID"
    ,b4          = "B4 - Lunch?"
    ,b4_response1= "B4_1 - Fruit?"
    ,b4_response2= "B4_2 - Fruit?"
  )

ds1
```

In this scenario, however, we will engage unlabeled data, as it presents some advantages.

# Problem

> Design the function named `augment_with_indicators()` for transforming items that provide two response slots into a set of binary indicator variables, one for each response value.

The target function should take arguments and return output as demonstrated below: 

```{r echo = TRUE, results='show', message=message_chunks}

ds0 %>% 
  augment_with_indicators(
    item_names       = c("b4_response1", "b4_response2") # item names
    ,valid_responses = c(1,2,3,97) # all others = non-response
    ,id_name         = "id" # unique row
    ,item_stem       = "b4" # stem for creating new items
    ,separator       = "_"  
)
```

This data structure allows us to answer the following type of questions

> What proportion of respondents had at least one type of fruit for lunch?

# Solution 1

Before attempting to design a function for solving a general task of this type, let us work through this problem with a hard-coded solution


Isolate variables to be evaluated and pivot the data to produce a response-level records

```{r  echo = TRUE, results='show', message=message_chunks}
(ds1 <- ds0 %>% select(id, b4_response1, b4_response2))
# define the pool of valid values (the rest  will be converted to NA)
(valid_responses <- c(1,2,3,97))
item_names     <- c("b4_response1","b4_response2")

ds2 <-
  ds1 %>%
  tidyr::pivot_longer(cols = item_names) %>%
  mutate(
    value_valid = value %in% valid_responses # TRUE if target, FALSE if valid, but not target
    ,item_response = paste0("b4","_",value)
  ) %>%
  group_by(id, item_response) %>%
  ungroup()

ds2
```

In this _response-level_ form we can evaluate (column  `value_valid`) whether each response value belongs to the set of valid values which we defined as `r valid_responses`. 

The `ds2` form allows us to pivot the data, creating a column for each unique values of the response

```{r  echo = TRUE, results='show', message=message_chunks}
ds3 <-
  ds2 %>%
  mutate(
    value = ifelse(value %in% valid_responses, value, NA)
  ) %>% 
  filter(!is.na(value)) %>%
  select(id, item_response, value_valid) %>%
  pivot_wider(names_from = item_response, values_from = value_valid, values_fn=max) %>%
  mutate_at(
    .vars = setdiff(names(.),"id")
    ,.funs = as.logical
  )
ds3
```
Now let's create a stand-along tibble that will contain a _person-level_ summary, answering the question 
> Does the response vector contain at least one valid value? 

```{r  echo = TRUE, results='show', message=message_chunks}
ds_valid <- 
  ds2 %>%  # !!!
  select(id, value_valid) %>% 
  group_by(id) %>% 
  summarize(
    value_valid = sum(value_valid, na.rm = T)>0L # at least one valid
  ) %>% 
  mutate(
    name = "b4_valid"
  ) %>% 
  pivot_wider(names_from = "name", values_from = "value_valid")
ds_valid
```
The substantive interpretation of this table answer the question
> Did ther respondent have at least one fruit for lunch? 

Now we can combine `ds_valid` and `ds3` into a single tibble that meets our target requirements
```{r  echo = TRUE, results='show', message=message_chunks}
ds4 <-
  dplyr::left_join(
    ds1
    ,ds_valid
    ,by = "id"
  ) %>% 
  dplyr::left_join(
    ds3
    ,by = "id"
  )
ds4
```

# Solution 2

Now let's examine the functional solution to solve this type of task
```{r echo=T}
print(augment_with_indicators)
```

```{r echo = TRUE, results='show', message=message_chunks}
ds0
ds0 %>% 
  augment_with_indicators(
    item_names       = c("b4_response1", "b4_response2") # item names
    ,valid_responses = c(1,2,3,97) # all others = non-response
    ,id_name         = "id" # unique row
    ,item_stem       = "b4" # stem for creating new items
    ,separator       = "_"  
)
```

# Session Information {#session-info}

For the sake of documentation and reproducibility, the current report was rendered in the following environment. Click the line below to expand.

<details>

<summary>

Environment

</summary>

```{r session-info, echo=FALSE}
if( requireNamespace("devtools", quietly = TRUE) ) {
  devtools::session_info()
} else {
  sessionInfo()
}
```

</details>

```{r session-duration, echo=FALSE}
report_render_duration_in_seconds <- round(as.numeric(difftime(Sys.time(), report_render_start_time, units="secs")))
```

Report rendered by `r Sys.info()["user"]` at `r strftime(Sys.time(), "%Y-%m-%d, %H:%M %z")` in `r report_render_duration_in_seconds` seconds.
